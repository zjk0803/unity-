using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEditor;
using UnityEngine;
using Assets._07.Network;
using Server;
using SSJJ.Manager;
using Sts.Manager;
using Sts.SaveDataManagement;
using Sts.Utils;
using UnityEngine.UI;
using DropItemData = thrift.sts.DropItemData;


namespace Assets.Editor.QATools
{

    

    public class TestTool : EditorWindow
    {

        //下面这个特性是在Unity的工具栏的入口
        [MenuItem("QA/QA测试工具/QA测试工具")]
        static void ShowWindow()
        {
            EditorWindow.GetWindow(typeof(TestTool), true, "QA测试工具");
        }

        string str_cmd = "";
        GUIStyle style_skillbook = new GUIStyle("Button");
        GUIStyle style_skillbook100 = new GUIStyle("Button");
        GUIStyle style_skillsly100 = new GUIStyle("Button");
        GUIStyle style_skilldjj100 = new GUIStyle("Button");
        GUIStyle style_green = new GUIStyle("Button");
        string str_cmd1 = "";

        private void Awake()
        {
            //颜色字体样式
            style_skillbook.normal.textColor = Color.red;
            style_skillbook100.normal.textColor = Color.red;
            style_skillsly100.normal.textColor = Color.red;
            style_skilldjj100.normal.textColor = Color.red;
            style_green.normal.textColor = Color.green;
        }

        void OnGUI()
        {
            GUILayout.Space(10f);   
            GUILayout.BeginHorizontal();
            {
                //GUILayout.Label  文本显示
                GUILayout.Label("指令：", GUILayout.Width(50f));
                //文本字段
                str_cmd = GUILayout.TextField(str_cmd, GUILayout.Width(80f));
            }
            if (GUILayout.Button("确定", GUILayout.Width(50f)))
            {
                SubmitCmd(str_cmd);
            }
            GUILayout.EndHorizontal();

            GUILayout.Space(10f);
            GUILayout.BeginHorizontal();

            if (GUILayout.Button("技能证书*1", style_skillbook, GUILayout.ExpandWidth(true)))
            {
                SubmitCmd("item 2 2700000 1");
            }
            if (GUILayout.Button("技能证书*100", style_skillbook100, GUILayout.ExpandWidth(true)))
            {
                SubmitCmd("item 2 2700000 100");
            }
            if (GUILayout.Button("圣礼盐*100", style_skillsly100, GUILayout.ExpandWidth(true)))
            {
                SubmitCmd("item 2 2201 100");
            }
            if (GUILayout.Button("代金券*100", style_skilldjj100, GUILayout.ExpandWidth(true)))
            {
                SubmitCmd("item 2 2606 100");
            }
            GUILayout.EndHorizontal();
            GUILayout.Space(10f);
            if (GUILayout.Button("跳过新手引导", style_green, GUILayout.ExpandWidth(false)))
            {
                SubmitCmd("guide");
                //请使用游戏中的全局携程
                //XXXXX.StartCoroutine(ExecuteCmds(list_cmds));
            }
            GUILayout.EndHorizontal();
            GUILayout.Space(10f);
            GUILayout.BeginHorizontal();
            {
                //GUILayout.Label  文本显示
                GUILayout.Label("跳关：", GUILayout.Width(50f));
                //文本字段
                str_cmd1 = GUILayout.TextField(str_cmd1, GUILayout.Width(50f));
            }
            if (GUILayout.Button("确定", GUILayout.ExpandWidth(false)))
            {
                SubmitCmd("blink "+str_cmd1);
            }
            GUILayout.EndHorizontal();

            GUILayout.Space(10f);
            GUILayout.BeginHorizontal();

        }

        /// <summary>
        /// 批量执行GM指令
        /// </summary>
        /// <param name="invincible">作弊指令列表</param>
        /// <returns></returns>
        public IEnumerator ExecuteCmds(ArrayList list_cmds)
        {
            foreach (string cmd in list_cmds)
            {
                SubmitCmd(cmd);
                yield return new WaitForSeconds(1);
            }
        }

        /// <summary>
        /// 发送作弊指令给服务器
        /// </summary>
        /// <param name="cmd">作弊指令</param>
        void SubmitCmd(string cmd)
        {
            if (Command_FinishGuide(cmd, "guide")) return;
            if (Command_GetItem(cmd, "item")) return;
            if (Command_blinkLevel(cmd, "blink")) return;



        }


        bool Command_FinishGuide(string cmd, string key)
        {
            if (cmd.IndexOf(key) == 0)
            {
                try
                {
                    DataManager.Instance.finishGuide = true;
                    EventManager.Instance.RaiseEvent("结束新手引导流程");
                    //PrintLog($"{DataManager.Instance.userName} 试图跳过当前新手流程!", LogType.Log);
                }
                catch
                {
                    //PrintLog($"Invalid parameters : {key} <_value>", LogType.Error);
                }
                return true;
            }
            return false;
        }
        bool Command_GetItem(string cmd, string key)
        {
            if (cmd.IndexOf(key + " ") == 0)
            {
                var paras = cmd.Split(' ');

                if (paras.Length >= 3)
                {
                    try
                    {
                        int type = int.Parse(paras[1]);
                        int id = int.Parse(paras[2]);
                        int amount = 1;
                        //选参
                        if (paras.Length > 3)
                            amount = int.Parse(paras[3]);
                        if (amount <= 0) amount = 1;

                        switch (type)
                        {
                            case 1:
                                var equipment = TplManager.Instance.GetEquipmentByID(id);
                                if (equipment != null)
                                {
                                    DataManager.Instance.AcquireItem(equipment);
                                    //PrintLog($"Acquired equipment [{equipment.name}]", LogType.Log);
                                }
                                else
                                {
                                    //PrintLog($"Can't find equipment by id <{id}>", LogType.Error);
                                }
                                break;
                            case 2:
                                var material = TplManager.Instance.GetMaterialByID(id);
                                //if (id == ConstDataManager.法力之尘ID)
                                //{
                                //    DataManager.Instance.ChangeManaDust(amount);
                                //}
                                if (material != null)
                                {
                                    material = material.clone;
                                    DataManager.Instance.AcquireItem(material, amount);
                                    //PrintLog($"Acquired material [{material.name} *{amount}]", LogType.Log);
                                    //Debug.LogError("这里正在怎加粉末------------------------------------------");
                                }
                                else
                                {
                                    //PrintLog($"Can't find material by id <{id}>", LogType.Error);
                                }
                                break;
                            case 3:
                                var consumable = TplManager.Instance.GetConsumableByID(id);
                                if (consumable != null)
                                {
                                    consumable = consumable.clone;
                                    DataManager.Instance.AcquireItem(consumable, amount);
                                    //PrintLog($"Acquired material [{consumable.name} *{amount}]", LogType.Log);
                                }
                                else
                                {
                                    //PrintLog($"Can't find consumable by id <{id}>", LogType.Error);
                                }
                                break;
                            default:
                                //PrintLog($"Can't find type <{type}>", LogType.Error);
                                break;
                        }
                    }
                    //如果转换失败就报错
                    catch
                    {
                        //PrintLog($"Invalid parameters : {key} <_type> <_id> [_amount(Material only)]", LogType.Error);
                    }
                }
                else
                {
                    //PrintLog($"Invalid parameters : {key} <_type> <_id> [_amount(Material use only)]", LogType.Error);
                }
                return true;
            }

            return false;
        }
        bool Command_blinkLevel(string command, string key)
        {
            if (command.IndexOf(key + " ") == 0)
            {
                var paras = command.Split(' ');

                if (paras.Length == 3 || paras.Length == 4)
                {
                    try
                    {
                        int chapter = int.Parse(paras[1]);
                        int level = int.Parse(paras[2]);
                        int type;
                        if (paras.Length == 4)
                        {
                            type = int.Parse(paras[3]);
                        }
                        else
                        {
                            type = 0;
                        }
                        EventManager.Instance.RaiseEvent("Blink", new ArrayList { chapter, level, type });
                       // PrintLog($"They who live by the wand shall die by my blade!", LogType.Log);
                    }
                    catch
                    {
                       // PrintLog($"Invalid parameters : {key} <_chapter> <_level> <type>", LogType.Error);
                    }
                }
                else
                {
                    //PrintLog($"Invalid parameters : {key} <_chapter> <_level> <type>", LogType.Error);
                }
                return true;
            }
            return false;
        }

        bool Command_BlinkStory(string cmd, string key)
        {
            if (cmd.IndexOf(key + " ") == 0)
            {
                var paras = cmd.Split(' ');

                if (paras.Length == 2)
                {
                    try
                    {
                        float storykey = float.Parse(paras[1]);

                        if (storykey == 1)
                        {
                            EventManager.Instance.RaiseEvent("强制回收剧情流程_编辑模式下");
                            EventManager.Instance.RaiseEvent("UI摄像机层级恢复");
                        }

                        if (storykey == 2)
                        {
                            HeroTeamInfo info = DataManager.Instance.GetHeroTeamInfoByType(FormationTypes.storyBattle);

                            bool b = false;
                            foreach (var item in info.teamHeros)
                            {
                                if (item != null)
                                    if (item.udid != 0)
                                    {
                                        b = true;
                                        break;
                                    }
                            }
                            if (!b)
                            {
                                DataManager.Instance.SetStoryBattleHero();
                            }
                            VisibleInfoModel.Instance.ChangeVisiblePattern(UIVisiblePattern.chapter);

                            StartStory_ctrl.instance.SaveStory("Story_第一章_01");
                            BattleGameManager.instance.isStoryOver = true;
                            BattleGameManager.instance.uiLoading.SetVisible(true);
                            Timeline_Ctrl.instance.EndTimeline(name, false);

                            Browsethestory.instance.battleCtrl.BeginStoryBattle(StoryDatamanager.instance.startStory_Model.GetStory());
                        }

                    }
                    catch
                    {
                        Debug.LogError("跳剧情指令输入错误");
                    }
                }



                return true;
            }
            return false;
        }



    }

}
